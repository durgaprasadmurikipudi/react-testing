TDD:
How ? Write shell version of code such that could be called in test cases files, now obviously the test cases fail as there is 
no code. Now you write the code just enough to pass the test cases. 
Test cases cover all scenarios, such that code coverage is good and business requirements are validated.
Why ? More efficient approach because, you can run test cases free of charge, without any additional effort.
Better code in a way, because - you force your code to be better organized such that it's testable,
You need not write coding for tests, so less rework! As regerssion is built-in, it provides a greater advantage, as we 
progress and refactor or add more features to our code. And ofcourse fewer bugs, when you have unit test cases.
Great code coverage.

What is Enzyme?
Creates Virtual DOM for testing, allows testing without a browser, we need to see how components render,
Also Enzyme has a better toolkit to test, for example like you can do things like,
searching through the DOM.
use jQuery or CSS like selectors to effectively traverse through the DOM.
simulate simple events, 

Shallow rendering allows for quicker testing by rendering only one level deep, i.e.,render parent and use palceholders for
 the childrens and that's how you do it.
It will render every thing in the parent component that is not a react component.
so in the render method of a parent component, if you have a react-component, placeholder, children are used for them.
Mount renders all the children including nested react components.

Here, enzyme provides access to props and state and for both reading and manipulating them.

WE install enzyme by npm install --save-dev enzyme jest-enzyme enzyme-adapter-react-16
jest-enzyme facilitates communication between jest and enzyme, enzyme adapter library to speak with the specific version of react.

Before enzyme is used, it needs to be setup with the adapter that we just installed,

import Enzyme from 'enzyme';
import EnzymeAdapter from 'enzyme-adapter-react-16'

Enzyme.configure({ adapter: new EnzymeAdapter()})

and you can use enzyme in the tests in that file.

When you do a shallow render, the returned wrapper, can print of all the dom in string format, when its debug function is invoked.

Types of tests:
Unit tests: tests a piece of code, usually a function.

Integration tests:
tests how multiple untis work together..

Acceptance/ End-to-End tests:
How a user would interact with app, is achieved by selenium running the app on a browser and testing the app.
It tests from frontend interactions till database.

Testing goals:
Maintenance of tests: 
1. Ideally we should not refactor the tests, when we refactor the code.
  i.e., We should test for what app does, not how it does, that way when implementation changes, testing remains the same and validates
  if app functionality is changed because of this change.

  To get a better idea, we have to write tests like this for a sample incrementor example.
  If whenever click a button and the value displayed on the screens increment by 1 every time, and we want to test it,
  we write test like 
  1. set initial state
  2. simulate button click
  3. check if the value is incremented

  But testcase is brittle if we write like this,
  1. set initial state
  2. simulate button click,
  3. check if button handler function was invoked, ***** wrong ***** because implementations can change.

  So finally testing tests app behavior not implementation.

2. Easy diagnosis of tests.
  So you happen to write broader tests testing a piece of functionality so as to not care about the implementaion, then we 
  are gonna face difficulties when test case fails, we are gonna have to put lot of time in investigating as why the test cases
  are failing.

  Fo example, if we are writing testing for a shopping cart, and the user actions that are allowed before they are added to cart
  are 1. pick a t-shirt, pick its size, pick its color, pick the text written on it and then click on add cart.
  and when this test case fails, by not having the expected items in cart, we are not sure at which step the test case failed.

  So if we have to check the internal state so as to be granular and easy detection of problem, we got to touch the implementation,
  by checking if a particular function was called to change the internal state for every part of process.
  But we thought its beter not to tocuh the implementation no ?
  So here is the deal, a good test case is a trade off between granular unit test case and a broader one (integration).

  Testing is an art, some times you write granular ones, some times you write broader ones and some a trade off!.

  Snapshot tests are  brittle, becuase they wont allow for a minor change to happen. and when these testcase are written by another
  developer,and when the snapshots tests are failing you often do not know if its a legitimate one or an indication of a problem.

Tests can be be written for connected components or just that components, that we get by explciitly exporting the components,
Redux docs encourage the independent testing of the connect components, by seperately exporting them.
Enzyme docs encourage testing the connected components by diving more into shallow components, you will learn more about dive method later on.,
There are two ways to test the connected components, by using redux-mock-store and by using original store.
Original store lets you test the actual state changes by components and redux-mock-store lets you test the set of actions generated
and how many and the order in which they are generated.
The effective use of them both lets you pinpoint the error or bug if you have and efficient coverage.

On a side note, when we use redux-thunk, we can dispatch multiple actions, we actually get returned a function, 
we can do whatever we want, not just for the asynchronous calls.

When you test a promise in test then returning it, will make the test case wait till it completes and returns the status 
whether success/failure depending on promise resolution.

To test the axios calls, you can actually install moxios.
All you need to do is call moxios.install in beforeEach(test) and moxios.uninstall in afterEach(test).
This diverts the acxios calls to divert to moxios rather than original destination. 
Moxios somehows axios itnercepts calls and can respond iwth its repsonse.
For example you can do  
const request = moxios.requests.mostRecent();
      request.respondWith({
        status: 200,
        response: secretWord
      });
    });

This way you can return the desired response to axios call.

You can mount a componet with shallow provided by Enzyme.
The wrapper returned by shallow wrapper gives a find helper function, through which we can traverse the dom's
IT can return the reference to that dom component which matches the selector passed to the helper function.
You can see the whole dom by calling debug method on it, if it has multiple child componetns you can call dive function
and go one more level deep and get reference to that child component.
I amn ot sure how it h=behaves when you have multiple react children.
You can also get a instance and get reference to props and other stuff.

What's mroe better than getting and setting a state, you can directly call setState and state on the wrapper and have fun!
The wrapper.state function takes a path to that state variable that you want to get the value for.

If you get a reference to a button kind of thing you can simulate events on it.
and re-get the reference of the component that you think will change and see if the tests passed. (Y)

You can call the component lifecycle methods also, wrapper.instance().componentDidMount();
But you got to set the default calling of lifecycle methods of component in enzyme adapter to be false.
Enzyme.configure({
  adapter: new EnzymeAdapter(),
  disableLifecycleMethods: true
});

You can create a store separately to test it, and get the refernce to the created store and call dispatch methods on it to see how 
it is being changed.








  

   


